import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from './store.js';
import { Vehicle } from '../types/vehicle.js';

export interface VehiclesState {
  vehicles: Array<Vehicle>;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: VehiclesState = {
  vehicles: [],
  status: 'idle',
};

export const counterSlice = createSlice({
  name: 'vehicles',
  initialState,
  reducers: {
    addvehicle: (state, payload: PayloadAction<Vehicle>) => {
      const existingIndex = state.vehicles.findIndex(
        (vehicle: Vehicle) => vehicle.id === payload.payload.id
      );
      if (existingIndex >= 0) {
        // eslint-disable-next-line no-param-reassign
        state.vehicles[existingIndex] = payload.payload;
      } else {
        state.vehicles.push(payload.payload);
      }
    },
    cleanupAged: () => {
      // state.vehicles = state.vehicles.filter(vehicle => !isTrafficAged(vehicle));
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //  builder
  //     .addCase(incrementAsync.pending, (state) => {
  //        state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //        state.status = 'idle';
  //        state.value += action.payload;
  //    });
  // },
});

export const { addvehicle, cleanupAged } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectVehicles = (state: RootState) => state.vehicles;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//  dispatch,
//  getState
// ) => {
//  const currentValue = selectVehicles(getState());
//  if (currentValue % 2 === 1) {
//    dispatch(incrementByAmount(amount));
//  }
// };

export default counterSlice.reducer;

// const getVehiclesSelector = state => state.vehicles;
// const getFilterSelector = state => state.filter;

// // NOTE: We use reselect to cache the filtered vehicles. THis will reduce CPU load
// //       and ensures that we will only re-apply the filter when changed
// export const getVehicles = createSelector(
//   getVehiclesSelector,
//   getFilterSelector,
//   (vehicles, filter) => {
//     switch (filter) {
//       case VisibilityFilters.SHOW_POSITIONS_VALID:
//         return vehicles.filter((v:Vehicle) => v.isPositionValid === true).sort((a:Vehicle, b:Vehicle) => a.distance - b.distance);
//       default:
//         return vehicles;
//     }
//   }
// );
